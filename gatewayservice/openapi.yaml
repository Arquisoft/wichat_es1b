openapi: 3.0.0
info:
  title: Gateway Service API
  description: API Gateway for routing requests to various microservices
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server
  - url: http://SOMEIP:8000
    description: Production server
tags:
  - name: Authentication
    description: User authentication endpoints
  - name: User Management
    description: User account management endpoints
  - name: Questions
    description: Question generation and management endpoints
  - name: Sessions
    description: User session management endpoints
  - name: LLM Services
    description: Language model interaction endpoints
  - name: System
    description: System health and diagnostic endpoints
paths:
  /health:
    get:
      tags:
        - System
      summary: Check the health status of the service
      operationId: checkHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK

  /login:
    post:
      tags:
        - Authentication
      summary: Authenticate a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: student
                password:
                  type: string
                  example: pass
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  username:
                    type: string
                    example: student
                  createdAt:
                    type: string
                    example: '2024-03-17T20:47:23.935Z'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid credentials

  /adduser:
    post:
      tags:
        - User Management
      summary: Register a new user
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: student
                password:
                  type: string
                  example: pass
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  password:
                    type: string
                    description: Hashed password
                  _id:
                    type: string
                  createdAt:
                    type: string

  /askllm:
    post:
      tags:
        - LLM Services
      summary: Send a query to the language model
      operationId: askLLM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  example: "What is the capital of France?"
      responses:
        '200':
          description: LLM response
          content:
            application/json:
              schema:
                type: object

  /configureAssistant:
    post:
      tags:
        - LLM Services
      summary: Configure the LLM assistant
      operationId: configureAssistant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                  example: "gpt-3.5-turbo"
                parameters:
                  type: object
      responses:
        '200':
          description: Assistant configured successfully
          content:
            application/json:
              schema:
                type: object

  /generateQuestion:
    get:
      tags:
        - Questions
      summary: Generate a new question
      operationId: generateQuestion
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Question category
      responses:
        '200':
          description: Generated question
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseQuestion:
                    type: string
                    example: "¿Cual es la capital de España?"
                  responseOptions:
                    type: array
                    items:
                      type: string
                    example: ["Barcelona", "Madrid", "Oviedo", "Valladolid"]
                  responseCorrectOption:
                    type: string
                    example: "Madrid"
                  responseImage:
                    type: string
                    format: uri

  /nextQuestion:
    get:
      tags:
        - Questions
      summary: Get the next question in sequence
      operationId: nextQuestion
      responses:
        '200':
          description: Next question
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseQuestion:
                    type: string
                  responseOptions:
                    type: array
                    items:
                      type: string
                  responseCorrectOption:
                    type: string
                  responseImage:
                    type: string
                    format: uri

  /generatedQuestions:
    get:
      tags:
        - Questions
      summary: Get generated questions
      description: Retrieves questions, optionally filtered by category
      parameters:
        - name: category
          in: query
          required: false
          schema:
            type: string
            enum: [ Geografia, Cultura, Personajes, General ]
          description: Category to filter questions, by omitting the parameter all questions are returned
      responses:
        '200':
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      type: string
                      description: The question text
                    correctAnswer:
                      type: string
                      description: The correct answer
                    inc_answer_1:
                      type: string
                      description: First incorrect answer option
                    inc_answer_2:
                      type: string
                      description: Second incorrect answer option
                    inc_answer_3:
                      type: string
                      description: Third incorrect answer option
                    category:
                      type: string
                      description: Question category
                    image:
                      type: string
                      description: URL to the question image
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /save-session:
    post:
      tags:
        - Sessions
      summary: Save a user session
      operationId: saveSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "student"
                session:
                  type: object
      responses:
        '200':
          description: Session saved successfully
          content:
            application/json:
              schema:
                type: object

  /get-sessions/{username}:
    get:
      tags:
        - Sessions
      summary: Get sessions for a specific user
      operationId: getUserSessions
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username
      responses:
        '200':
          description: User sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    questions:
                      type: array
                      items:
                        type: object
                        properties:
                          question:
                            type: string
                            example: "¿Cuál es el lugar de la imagen?"
                          correctAnswer:
                            type: string
                            example: "Santo Tomé y Príncipe"
                          userAnswer:
                            type: string
                            example: "Santo Tomé y Príncipe"
                          _id:
                            type: string
                            example: "67e2d70084fbcdf0244234a9"
                    score:
                      type: integer
                      example: 5
                    wrongAnswers:
                      type: integer
                      example: 0
                    _id:
                      type: string
                      example: "67e2d70084fbcdf0244234a8"
                    createdAt:
                      type: string
                      format: date-time
                      example: "2025-03-25T16:17:04.845Z"

  /configureGame:
    post:
      tags:
        - Questions
      summary: Configure game parameters
      operationId: configureGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxQuestions:
                  type: integer
                  example: 5
                  description: Maximum number of questions to include in the game
      responses:
        '200':
          description: Game configured successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Game configuration saved successfully"
        '400':
          description: Invalid configuration parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid maxQuestions value"


  /startGame:
    post:
      tags:
        - Questions
      summary: Start a new game session
      operationId: startGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "student"
      responses:
        '200':
          description: Game started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    example: "67e2d70084fbcdf0244234a8"
                  firstQuestion:
                    type: object
                    properties:
                      question:
                        type: string
                        example: "¿Cuál es el lugar de la imagen?"
                      options:
                        type: array
                        items:
                          type: string
                        example: [ "Santo Tomé y Príncipe", "Madagascar", "Filipinas", "Jamaica" ]
                      image:
                        type: string
                        example: "https://example.com/images/location.jpg"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"